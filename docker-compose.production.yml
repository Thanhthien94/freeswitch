version: '3.8'

services:
  # FreeSWITCH Core PBX
  freeswitch:
    image: safarov/freeswitch:latest
    platform: linux/amd64
    container_name: freeswitch-core
    hostname: freeswitch
    restart: unless-stopped
    cap_add:
      - SYS_NICE
      - SYS_RESOURCE
    security_opt:
      - seccomp:unconfined
    ports:
      # SIP signaling
      - "5060:5060/udp"
      - "5060:5060/tcp"
      # Event Socket Library (internal only)
      - "8021:8021"
      # RTP media ports (optimized range)
      - "16384-16484:16384-16484/udp"
    volumes:
      - ./configs/freeswitch:/etc/freeswitch:rw
      - ./configs/freeswitch-logs:/var/log/freeswitch:rw
      - ./configs/freeswitch-sounds:/usr/share/freeswitch/sounds:rw
      - ./recordings:/var/lib/freeswitch/recordings:rw
      - freeswitch-data:/var/lib/freeswitch
    environment:
      - FREESWITCH_DOMAIN=${FREESWITCH_DOMAIN:-localhost}
      - FREESWITCH_ESL_PASSWORD=${FREESWITCH_ESL_PASSWORD:-ClueCon}
      - EXTERNAL_IP=${EXTERNAL_IP:-auto}
    networks:
      - pbx-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "fs_cli", "-x", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # NestJS API Gateway
  nestjs-api:
    build:
      context: ./nestjs-app
      dockerfile: Dockerfile
    container_name: nestjs-api
    hostname: nestjs-api
    restart: unless-stopped
    ports:
      - "3000:3000"  # Exposed for Nginx Proxy Manager
    volumes:
      - ./nestjs-app:/app
      - ./recordings:/var/lib/freeswitch/recordings:ro
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pbx_user}:${POSTGRES_PASSWORD:-pbx_password}@postgres:5432/${POSTGRES_DB:-pbx_db}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-pbx_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pbx_password}
      - POSTGRES_DB=${POSTGRES_DB:-pbx_db}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-admin123}@rabbitmq:5672
      - FREESWITCH_HOST=freeswitch
      - FREESWITCH_ESL_PORT=8021
      - FREESWITCH_ESL_PASSWORD=${FREESWITCH_ESL_PASSWORD:-ClueCon}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - RECORDINGS_PATH=/var/lib/freeswitch/recordings
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3002}
      - DOMAIN=${DOMAIN:-http://localhost}
      - API_PREFIX=${API_PREFIX:-api/v1}
      - SWAGGER_ENABLED=${SWAGGER_ENABLED:-true}
      - SWAGGER_PATH=${SWAGGER_PATH:-api/docs}
    networks:
      - pbx-network
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - freeswitch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-ui
    hostname: frontend
    restart: unless-stopped
    ports:
      - "3002:3000"  # Exposed for Nginx Proxy Manager
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      # For production, this should be your domain
      - NEXT_PUBLIC_API_URL=${DOMAIN_API:-http://localhost:3000}/api/v1
      # Server-side API URL (container-to-container communication)
      - BACKEND_API_URL=http://nestjs-api:3000/api/v1
      - API_URL=http://nestjs-api:3000
      - SESSION_SECRET=${SESSION_SECRET:-your-super-secret-session-key}
      - NEXTAUTH_URL=${DOMAIN:-http://localhost:3002}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-nextauth-secret}
    networks:
      - pbx-network
    depends_on:
      - nestjs-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    hostname: postgres
    restart: unless-stopped
    # Remove port exposure for security (only internal access)
    # ports:
    #   - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pbx_db}
      - POSTGRES_USER=${POSTGRES_USER:-pbx_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pbx_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - pbx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pbx_user} -d ${POSTGRES_DB:-pbx_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    hostname: redis
    restart: unless-stopped
    # Remove port exposure for security (only internal access)
    # ports:
    #   - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis-data:/data
    networks:
      - pbx-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-queue
    hostname: rabbitmq
    restart: unless-stopped
    # Remove management port exposure for security
    # ports:
    #   - "5672:5672"
    #   - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-admin123}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - pbx-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-monitor
    hostname: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pbx-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dashboard
    hostname: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - pbx-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    hostname: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - pbx-network

networks:
  pbx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  freeswitch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
